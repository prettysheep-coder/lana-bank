---
description: rust rules
globs: **.rs
alwaysApply: false
---

## general organization of the rust code

The rust application is split across different layer:
- lana/ is the application layer. most of the code is in lana/app/src
- core/ contains the key primitives of our banking application that are split around multiple repositories
- lib/ contains some general supporting utilities

we follow Design Driven Development, and hexagonal pattern, for building the architecture of the bank. 

when started, the application expose two servers on 2 different ports: the admin API and the customer API

The admin API is located in lana/admin-server and the custmer API is located in lana/customer-server.
this is where you will find the code for the graphql layer

The server run with Postgres, and is being accessed through the sqlx library.

## Cargo.toml

Use `{ workspace = true }` when you import new package in a sub module

All dependencies should be declared in the root Cargo.toml file

## database

Migrations files are located in `lana/app/migrations/*.sql`

You can query the database to debug with `psql -U user -h localhost -p 5433 -d pg -c {}`

## verify your work

You should know about those commands:

- `make check-code` to verify that the code compile
- `make sdl` to regenerate the schema.graphql. do not attempt to update schema.graphql yourself
- `make sqlx-prepare` to update the .sqlx files. do not attempt to update the .sqlx files yourself
- `make test-in-ci` to verify the integration tests
- `make e2e` to verify the ends to ends tests (also called bats tests)

## general coding rules

- interaction across module boundaries are done through events. public events are listed 
- do not update schema.graphql manually. rather do it with `make sdl`
- we don't want to use openssl. rather we use rust-ssl. import rustls-tls with features flag for package we import

- use Strum library for primitive enum <-> string conversion
- we use DDD (Domaine Driven Design) pattern. the filename give a hint as what it's aim to do: 
-- mod.rs are the interface of the module
-- repo.rs is the interface to the storage layer (most likely postgres)
-- entity.rs contains the events definition, and implementation for their lifecycles

- the dependency graph should be as follow: 
-- core can import lib
-- lana can import core

## hexagonal architecture

the incoming adapter layer is graphql. code for it is in:
- lana/admin-server/src/graphql
- lana/customer-server/src/graphql

there are also outgoing adapter layers for external services.

the use case layer are located in:
- lana/app/*

the adapter layer should only be calling do into the use case layer

### within modules

careful filename convention allow for consistency across the application

- `lib.rs` and `mod.rs` expose the use case for the module
- `primitives.rs` represents the value objects in the module
- `repo.rs` represents the storage layer. repo is heavily templatize with `es_repo`. 
- `error.rs` contains the list of errors enum returned by the module
- `entity.rs` transforms the list of events into the current state, and contain addition method to mutate the state from business operation. Entities have queries and mutations. mutation have `&mut self` as the first input, and `Idempotent<>` as the return type
- `event.rs` contains the list of __public__ events the module has
- `publisher.rs` is used to published external events to the outbox
- `job.rs` contain code to interact with the asynchronus jobs library

if the filename is different than what is above, this contains domain logic code. 
