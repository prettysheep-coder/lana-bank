#@ load("@ytt:data", "data")

#@ load("vendor/pipeline-fragments.lib.yml",
#@   "build_edge_image",
#@   "public_docker_registry",
#@   "nodejs_task_image_config",
#@   "docker_host_pool",
#@   "test_on_docker_host",
#@   "repo_resource",
#@   "edge_image_resource",
#@   "version_resource",
#@   "gh_release_resource",
#@   "pipeline_tasks_resource",
#@   "release_task_image_config",
#@   "rust_task_image_config",
#@   "charts_repo_resource",
#@   "charts_repo_bot_branch",
#@   "private_docker_registry",
#@   "nix_task_image_config"
#@ )

#@ load("app-template.lib.yml",
#@   "app_src_resource",
#@   "app_src_resource_name",
#@   "build_app_edge_image_name",
#@   "app_edge_image_resource_name",
#@   "app_latest_image_resource_name",
#@   "app_latest_image",
#@   "build_app_edge_image",
#@   "app_edge_image"
#@ )

groups:
  - name: lana-bank
    jobs:
      - nodejs-check-code
      - rust-check-code
      - integration-tests
      - bats-tests
      - release
      - build-edge-image
      - release-docker
      - set-dev-version
      - bump-image-in-chart
      -  #@ build_app_edge_image_name("admin-panel")
      -  #@ build_app_edge_image_name("customer-portal")
      - build-meltano-edge-image
      - build-static-binary

jobs:
  -  #@ build_edge_image()

  - name: integration-tests
    serial: true
    plan:
      - in_parallel:
          - get: repo
            trigger: true
          - { get: pipeline-tasks }
      - task: integration-tests
        attempts: 1
        privileged: true
        config:
          platform: linux
          image_resource: #@ nix_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
              path: repo
          run:
            path: sh
            args:
              - -exc
              - |
                set -euo pipefail
                pushd repo

                echo "--- Entering Nix Develop Environment and running script ---"
                # The script path is relative to the pipeline-tasks input root
                # Assumes pipeline-tasks is mounted at the task root, alongside repo
                nix -L develop --command sh -exc ../pipeline-tasks/ci/tasks/podman-integration-tests.sh

  - name: bats-tests
    serial: true
    plan:
      - in_parallel:
          - get: repo
            trigger: true
          - { get: pipeline-tasks }
      - task: bats-tests
        timeout: 25m
        attempts: 1
        privileged: true
        config:
          platform: linux
          image_resource: #@ nix_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
              path: repo
          run:
            path: sh
            args:
              - -exc
              - |
                set -euo pipefail
                pushd repo

                echo "--- Entering Nix Develop Environment and running script ---"
                # The script path is relative to the pipeline-tasks input root
                # Assumes pipeline-tasks is mounted at the task root, alongside repo
                nix -L develop --command sh -exc ../pipeline-tasks/ci/tasks/podman-e2e-tests.sh

  - name: rust-check-code
    serial: true
    plan:
    - in_parallel:
      - { get: repo, trigger: true }
      - { get: pipeline-tasks }
    - task: check-code
      config:
        platform: linux
        image_resource: #@ rust_task_image_config()
        inputs:
        - name: pipeline-tasks
        - name: repo
        caches:
        - path: cargo-home
        - path: cargo-target-dir
        run:
          path: pipeline-tasks/ci/vendor/tasks/rust-check-code.sh

  - name: nodejs-check-code
    serial: true
    plan:
    - in_parallel:
      - { get: repo, trigger: true }
      - { get: pipeline-tasks }
    - task: check-code
      config:
        platform: linux
        image_resource: #@ nodejs_task_image_config()
        inputs:
        - name: pipeline-tasks
        - name: repo
        run:
          path: pipeline-tasks/ci/tasks/check-code-apps.sh

  - name: build-static-binary
    serial: true
    plan:
    - in_parallel:
      - get: repo
        trigger: true
      - get: pipeline-tasks
    - task: cargo-build-release
      attempts: 2
      config:
        platform: linux
        image_resource:
          type: registry-image
          source: {repository: clux/muslrust, tag: stable}
        inputs:
        - name: pipeline-tasks
        - name: repo
        outputs: [{name: bin}]
        caches:  [{path: cargo-target}, {path: cargo-home}]
        run:
          path: sh
          args:
          - -exc
          - |
            export CARGO_HOME="$PWD/cargo-home"
            export CARGO_TARGET_DIR="$PWD/cargo-target-dir"
            cd repo
            SQLX_OFFLINE=true cargo build --release --locked --all-features --bin lana-cli --target x86_64-unknown-linux-musl
            mkdir -p ../bin
            cp "${CARGO_TARGET_DIR}/x86_64-unknown-linux-musl/release/lana-cli" ../bin/
            cat > ../bin/Dockerfile <<'EOF'
            FROM scratch
            COPY lana-cli /lana-cli
            ENTRYPOINT ["/lana-cli"]
            EOF
    - task: build-image-with-kaniko
      privileged: true
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: gcr.io/kaniko-project/executor
            tag: debug
        inputs:  [{name: bin}]
        outputs: [{name: image}]
        run:
          path: /kaniko/executor
          args:
            - --dockerfile=Dockerfile
            - --context=bin
            - --use-new-run
            - --single-snapshot
            - --cache=false
            - --no-push
            - --tar-path=image/image.tar
    - put: static-binary-image
      params:
        image: image/image.tar
        additional_tags: repo/.git/ref  

  - name: release
    serial: true
    plan:
      - in_parallel:
          - get: repo
            passed: 
              - nodejs-check-code
              - rust-check-code
              - integration-tests
              - bats-tests
              - build-static-binary
            trigger: true
          - get: pipeline-tasks
          - get: version
          - get: #@ app_src_resource_name("admin-panel")
            passed:
              -  #@ build_app_edge_image_name("admin-panel")
            trigger: true
          - get: #@ app_src_resource_name("customer-portal")
            passed:
              -  #@ build_app_edge_image_name("customer-portal")
            trigger: true
          - get: meltano-edge-image
            passed:
              - build-meltano-edge-image
      - task: prep-release
        config:
          platform: linux
          image_resource: #@ release_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: repo
            - name: version
          outputs:
            - name: version
            - name: artifacts
          run:
            path: pipeline-tasks/ci/vendor/tasks/prep-release-src.sh
      - task: prep-release-apps
        config:
          platform: linux
          image_resource: #@ release_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: version
            - name: #@ app_src_resource_name("admin-panel")
              path: admin-panel-src
            - name: #@ app_src_resource_name("customer-portal")
              path: customer-portal-src
          outputs:
            - name: #@ app_src_resource_name("admin-panel")
              path: admin-panel-src
            - name: #@ app_src_resource_name("customer-portal")
              path: customer-portal-src
          run:
            path: pipeline-tasks/ci/tasks/prep-release-apps.sh
      - get: static-binary-image
        passed: [build-static-binary]
        trigger: true
      - task: unwrap-binary
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: {repository: alpine, tag: "3.20"}
          inputs: [{name: static-binary-image}]
          outputs: [{name: binaries}]
          caches: [{path: apk-cache}]
          run:
            path: sh
            args:
            - -exc
            - |
              mv static-binary-image/rootfs/* binaries
      - in_parallel:
        - do:
          - task: build-admin-panel-release
            attempts: 2
            privileged: true
            config:
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: vito/oci-build-task
              inputs:
                - name: admin-panel-src
              outputs:
                - name: admin-panel-image
                  path: image
              params:
                CONTEXT: admin-panel-src
                DOCKERFILE: admin-panel-src/apps/admin-panel/Dockerfile
              run:
                path: build
          - put: #@ app_latest_image_resource_name("admin-panel")
            params:
              image: admin-panel-image/image.tar
              additional_tags: version/version
        - do:
          - task: build-customer-portal-release
            attempts: 2
            privileged: true
            config:
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: vito/oci-build-task
              inputs:
                - name: customer-portal-src
              outputs:
                - name: customer-portal-image
                  path: image
              params:
                CONTEXT: customer-portal-src
                DOCKERFILE: customer-portal-src/apps/customer-portal/Dockerfile
              run:
                path: build
          - put: #@ app_latest_image_resource_name("customer-portal")
            params:
              image: customer-portal-image/image.tar
              additional_tags: version/version
      - put: repo
        params:
          tag: artifacts/gh-release-tag
          only_tag: true
          repository: repo
      - task: github-release
        config:
          image_resource: #@ rust_task_image_config()
          platform: linux
          inputs:
            - name: binaries
            - name: version
            - name: pipeline-tasks
            - name: artifacts
          outputs:
            - name: artifacts
          params:
            BRANCH: #@ data.values.git_branch
          run:
            path: pipeline-tasks/ci/tasks/github-release.sh
      - put: gh-release
        params:
          name: artifacts/gh-release-name
          tag: artifacts/gh-release-tag
          body: artifacts/gh-release-notes.md
          globs: [artifacts/binaries/*]
      - put: version
        params:
          file: version/version

  - name: release-docker
    serial: true
    plan:
      - in_parallel:
          - get: repo
            passed:
              - release
          - get: version
            passed:
              - release
            trigger: true
          - get: pipeline-tasks
          - get: meltano-edge-image
            passed:
              - release
            params:
              format: oci
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ rust_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: version
            - name: repo
          outputs:
            - name: repo
          params:
            GH_APP_ID: #@ data.values.github_app_id
            GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
          run:
            path: pipeline-tasks/ci/tasks/prep-docker-build-env.sh
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.env
            DOCKERFILE: "repo/Dockerfile.release"
          run:
            path: build
      - in_parallel:
          - put: latest-image
            params:
              image: image/image.tar
              additional_tags: version/version
          - put: meltano-latest-image
            params:
              image: meltano-edge-image/image.tar
              additional_tags: version/version

  - name: set-dev-version
    plan:
      - in_parallel:
          - { get: repo, passed: [release] }
          - { get: pipeline-tasks }
          - get: version
            trigger: true
            params: { bump: patch }
            passed: [release]
      - task: set-dev-version
        config:
          image_resource: #@ rust_task_image_config()
          platform: linux
          inputs:
            - name: version
            - name: repo
            - name: pipeline-tasks
          outputs:
            - name: repo
          run:
            path: pipeline-tasks/ci/tasks/set-dev-version.sh
          params:
            BRANCH: #@ data.values.git_branch
      - put: repo-dev-out
        params:
          repository: repo
          rebase: true

  - name: bump-image-in-chart
    plan:
      - in_parallel:
          - get: latest-image
            passed: [release-docker]
            params: { skip_download: true }
          - get: #@ app_latest_image_resource_name("admin-panel")
          - get: #@ app_latest_image_resource_name("customer-portal")
          - get: meltano-latest-image
            passed: [release-docker]
            params: { skip_download: true }
          - get: repo
            trigger: true
            passed: [release-docker]
          - get: version
            trigger: true
            passed: [release-docker]
          - get: charts-repo
            params: { skip_download: true }
          - get: pipeline-tasks
      - task: bump-image-digest-in-values
        config:
          platform: linux
          image_resource: #@ rust_task_image_config()
          inputs:
            - name: repo
            - name: latest-image
            - name: #@ app_latest_image_resource_name("admin-panel")
            - name: #@ app_latest_image_resource_name("customer-portal")
            - name: meltano-latest-image
            - name: pipeline-tasks
            - name: charts-repo
            - name: version
          outputs:
            - name: charts-repo
          params:
            BRANCH: #@ data.values.git_charts_branch
            CHARTS_SUBDIR: lana-bank
          run:
            path: pipeline-tasks/ci/tasks/bump-image-digest.sh
      - put: charts-repo-bot-branch
        params:
          repository: charts-repo
          force: true
      - task: open-charts-pr
        config:
          platform: linux
          image_resource: #@ rust_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: latest-image
            - name: charts-repo
            - name: repo
          params:
            GH_APP_ID: #@ data.values.github_app_id
            GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
            BRANCH: #@ data.values.git_charts_branch
            BOT_BRANCH: #@ data.values.git_charts_bot_branch
            CHARTS_SUBDIR: lana-bank
          run:
            path: pipeline-tasks/ci/tasks/chart-open-charts-pr.sh

  -  #@ build_app_edge_image("admin-panel")
  -  #@ build_app_edge_image("customer-portal")

  - name: build-meltano-edge-image
    plan:
      - in_parallel:
          - get: repo
            trigger: true
          - get: pipeline-tasks
      - task: build
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: gcr.io/kaniko-project/executor
              tag: debug
          inputs:
          - name: repo
          outputs:
          - name: image
          run:
            path: /kaniko/executor
            args:
              - --dockerfile=Dockerfile
              - --context=repo/meltano
              - --use-new-run
              - --single-snapshot
              - --cache=false
              - --no-push
              - --tar-path=image/image.tar
      - put: meltano-edge-image
        params:
          image: image/image.tar

resources:
  - name: repo
    type: git
    source:
      ignore_paths:
        - "ci/*[^md]"
        - apps/**/*
      fetch_tags: true
      uri: #@ data.values.git_uri
      branch: ci--try-update-on-oathkeeper-proxy
      private_key: #@ data.values.github_private_key
    webhook_token: ((webhook.secret))
  - name: repo-dev-out
    type: git
    source:
      fetch_tags: true
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key
    webhook_token: ((webhook.secret))

  - name: latest-image
    type: registry-image
    source:
      tag: latest
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ private_docker_registry() + "/" + data.values.folder_registry_image

  - name: meltano-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ public_docker_registry() + "/meltano"

  - name: meltano-latest-image
    type: registry-image
    source:
      tag: latest
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password
      repository: #@ public_docker_registry() + "/meltano"

  - name: static-binary-image
    type: registry-image
    source:
      tag: latest
      repository: #@ private_docker_registry() + "/" + data.values.folder_registry_image_static
      username: #@ data.values.docker_registry_user
      password: #@ data.values.docker_registry_password

  -  #@ pipeline_tasks_resource()
  -  #@ edge_image_resource(publicRepo=False)
  -  #@ version_resource()
  -  #@ gh_release_resource()
  -  #@ charts_repo_bot_branch()
  -  #@ charts_repo_resource()
  -  #@ app_src_resource("admin-panel", "main")
  -  #@ app_edge_image("admin-panel")
  -  #@ app_latest_image("admin-panel")
  -  #@ app_src_resource("customer-portal", "main")
  -  #@ app_edge_image("customer-portal")
  -  #@ app_latest_image("customer-portal")
